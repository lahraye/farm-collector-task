/*
 * This file is generated by jOOQ.
 */
package com.devstaff.farm_collector.repositories.jooq.tables;


import com.devstaff.farm_collector.repositories.jooq.Keys;
import com.devstaff.farm_collector.repositories.jooq.Public;
import com.devstaff.farm_collector.repositories.jooq.tables.Farms.FarmsPath;
import com.devstaff.farm_collector.repositories.jooq.tables.records.FarmersRecord;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Farmers extends TableImpl<FarmersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.farmers</code>
     */
    public static final Farmers FARMERS = new Farmers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmersRecord> getRecordType() {
        return FarmersRecord.class;
    }

    /**
     * The column <code>public.farmers.id</code>.
     */
    public final TableField<FarmersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.farmers.name</code>.
     */
    public final TableField<FarmersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>public.farmers.created_by</code>.
     */
    public final TableField<FarmersRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.farmers.last_modified_by</code>.
     */
    public final TableField<FarmersRecord, String> LAST_MODIFIED_BY = createField(DSL.name("last_modified_by"), SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.farmers.created_on</code>.
     */
    public final TableField<FarmersRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.farmers.last_modified_on</code>.
     */
    public final TableField<FarmersRecord, OffsetDateTime> LAST_MODIFIED_ON = createField(DSL.name("last_modified_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Farmers(Name alias, Table<FarmersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Farmers(Name alias, Table<FarmersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.farmers</code> table reference
     */
    public Farmers(String alias) {
        this(DSL.name(alias), FARMERS);
    }

    /**
     * Create an aliased <code>public.farmers</code> table reference
     */
    public Farmers(Name alias) {
        this(alias, FARMERS);
    }

    /**
     * Create a <code>public.farmers</code> table reference
     */
    public Farmers() {
        this(DSL.name("farmers"), null);
    }

    public <O extends Record> Farmers(Table<O> path, ForeignKey<O, FarmersRecord> childPath, InverseForeignKey<O, FarmersRecord> parentPath) {
        super(path, childPath, parentPath, FARMERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FarmersPath extends Farmers implements Path<FarmersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FarmersPath(Table<O> path, ForeignKey<O, FarmersRecord> childPath, InverseForeignKey<O, FarmersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FarmersPath(Name alias, Table<FarmersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FarmersPath as(String alias) {
            return new FarmersPath(DSL.name(alias), this);
        }

        @Override
        public FarmersPath as(Name alias) {
            return new FarmersPath(alias, this);
        }

        @Override
        public FarmersPath as(Table<?> alias) {
            return new FarmersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FarmersRecord, Integer> getIdentity() {
        return (Identity<FarmersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FarmersRecord> getPrimaryKey() {
        return Keys.FARMERS_PKEY;
    }

    private transient FarmsPath _farms;

    /**
     * Get the implicit to-many join path to the <code>public.farms</code> table
     */
    public FarmsPath farms() {
        if (_farms == null)
            _farms = new FarmsPath(this, null, Keys.FARMS__FK_FARMERS_FARM.getInverseKey());

        return _farms;
    }

    @Override
    public Farmers as(String alias) {
        return new Farmers(DSL.name(alias), this);
    }

    @Override
    public Farmers as(Name alias) {
        return new Farmers(alias, this);
    }

    @Override
    public Farmers as(Table<?> alias) {
        return new Farmers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Farmers rename(String name) {
        return new Farmers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Farmers rename(Name name) {
        return new Farmers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Farmers rename(Table<?> name) {
        return new Farmers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Farmers where(Condition condition) {
        return new Farmers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Farmers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Farmers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Farmers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Farmers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Farmers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Farmers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Farmers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Farmers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Farmers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
