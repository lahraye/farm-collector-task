/*
 * This file is generated by jOOQ.
 */
package com.devstaff.farm_collector.repositories.jooq.tables;


import com.devstaff.farm_collector.repositories.jooq.Keys;
import com.devstaff.farm_collector.repositories.jooq.Public;
import com.devstaff.farm_collector.repositories.jooq.tables.Crops.CropsPath;
import com.devstaff.farm_collector.repositories.jooq.tables.FarmFields.FarmFieldsPath;
import com.devstaff.farm_collector.repositories.jooq.tables.records.FarmOperationsRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FarmOperations extends TableImpl<FarmOperationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.farm_operations</code>
     */
    public static final FarmOperations FARM_OPERATIONS = new FarmOperations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmOperationsRecord> getRecordType() {
        return FarmOperationsRecord.class;
    }

    /**
     * The column <code>public.farm_operations.id</code>.
     */
    public final TableField<FarmOperationsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.farm_operations.field_id</code>.
     */
    public final TableField<FarmOperationsRecord, Integer> FIELD_ID = createField(DSL.name("field_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.farm_operations.planting_area_size</code>.
     */
    public final TableField<FarmOperationsRecord, BigDecimal> PLANTING_AREA_SIZE = createField(DSL.name("planting_area_size"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.farm_operations.amount_expected</code>.
     */
    public final TableField<FarmOperationsRecord, Integer> AMOUNT_EXPECTED = createField(DSL.name("amount_expected"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.farm_operations.amount_harvested</code>.
     */
    public final TableField<FarmOperationsRecord, Integer> AMOUNT_HARVESTED = createField(DSL.name("amount_harvested"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.farm_operations.crop_id</code>.
     */
    public final TableField<FarmOperationsRecord, Integer> CROP_ID = createField(DSL.name("crop_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.farm_operations.year</code>.
     */
    public final TableField<FarmOperationsRecord, Integer> YEAR = createField(DSL.name("year"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.farm_operations.created_by</code>.
     */
    public final TableField<FarmOperationsRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.farm_operations.last_modified_by</code>.
     */
    public final TableField<FarmOperationsRecord, String> LAST_MODIFIED_BY = createField(DSL.name("last_modified_by"), SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.farm_operations.created_on</code>.
     */
    public final TableField<FarmOperationsRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.farm_operations.last_modified_on</code>.
     */
    public final TableField<FarmOperationsRecord, OffsetDateTime> LAST_MODIFIED_ON = createField(DSL.name("last_modified_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private FarmOperations(Name alias, Table<FarmOperationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FarmOperations(Name alias, Table<FarmOperationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.farm_operations</code> table reference
     */
    public FarmOperations(String alias) {
        this(DSL.name(alias), FARM_OPERATIONS);
    }

    /**
     * Create an aliased <code>public.farm_operations</code> table reference
     */
    public FarmOperations(Name alias) {
        this(alias, FARM_OPERATIONS);
    }

    /**
     * Create a <code>public.farm_operations</code> table reference
     */
    public FarmOperations() {
        this(DSL.name("farm_operations"), null);
    }

    public <O extends Record> FarmOperations(Table<O> path, ForeignKey<O, FarmOperationsRecord> childPath, InverseForeignKey<O, FarmOperationsRecord> parentPath) {
        super(path, childPath, parentPath, FARM_OPERATIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FarmOperationsPath extends FarmOperations implements Path<FarmOperationsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FarmOperationsPath(Table<O> path, ForeignKey<O, FarmOperationsRecord> childPath, InverseForeignKey<O, FarmOperationsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FarmOperationsPath(Name alias, Table<FarmOperationsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FarmOperationsPath as(String alias) {
            return new FarmOperationsPath(DSL.name(alias), this);
        }

        @Override
        public FarmOperationsPath as(Name alias) {
            return new FarmOperationsPath(alias, this);
        }

        @Override
        public FarmOperationsPath as(Table<?> alias) {
            return new FarmOperationsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FarmOperationsRecord, Integer> getIdentity() {
        return (Identity<FarmOperationsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FarmOperationsRecord> getPrimaryKey() {
        return Keys.FARM_OPERATIONS_PKEY;
    }

    @Override
    public List<ForeignKey<FarmOperationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FARM_OPERATIONS__FK_FARM_OPERATIONS_CROPS, Keys.FARM_OPERATIONS__FK_FARM_OPERATIONS_FIELDS);
    }

    private transient CropsPath _crops;

    /**
     * Get the implicit join path to the <code>public.crops</code> table.
     */
    public CropsPath crops() {
        if (_crops == null)
            _crops = new CropsPath(this, Keys.FARM_OPERATIONS__FK_FARM_OPERATIONS_CROPS, null);

        return _crops;
    }

    private transient FarmFieldsPath _farmFields;

    /**
     * Get the implicit join path to the <code>public.farm_fields</code> table.
     */
    public FarmFieldsPath farmFields() {
        if (_farmFields == null)
            _farmFields = new FarmFieldsPath(this, Keys.FARM_OPERATIONS__FK_FARM_OPERATIONS_FIELDS, null);

        return _farmFields;
    }

    @Override
    public FarmOperations as(String alias) {
        return new FarmOperations(DSL.name(alias), this);
    }

    @Override
    public FarmOperations as(Name alias) {
        return new FarmOperations(alias, this);
    }

    @Override
    public FarmOperations as(Table<?> alias) {
        return new FarmOperations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmOperations rename(String name) {
        return new FarmOperations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmOperations rename(Name name) {
        return new FarmOperations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmOperations rename(Table<?> name) {
        return new FarmOperations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FarmOperations where(Condition condition) {
        return new FarmOperations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FarmOperations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FarmOperations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FarmOperations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FarmOperations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FarmOperations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FarmOperations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FarmOperations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FarmOperations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FarmOperations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
