/*
 * This file is generated by jOOQ.
 */
package com.devstaff.farm_collector.repositories.jooq.tables;


import com.devstaff.farm_collector.repositories.jooq.Keys;
import com.devstaff.farm_collector.repositories.jooq.Public;
import com.devstaff.farm_collector.repositories.jooq.tables.FarmOperations.FarmOperationsPath;
import com.devstaff.farm_collector.repositories.jooq.tables.records.CropsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Crops extends TableImpl<CropsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.crops</code>
     */
    public static final Crops CROPS = new Crops();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CropsRecord> getRecordType() {
        return CropsRecord.class;
    }

    /**
     * The column <code>public.crops.id</code>.
     */
    public final TableField<CropsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.crops.name</code>.
     */
    public final TableField<CropsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>public.crops.created_by</code>.
     */
    public final TableField<CropsRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.crops.last_modified_by</code>.
     */
    public final TableField<CropsRecord, String> LAST_MODIFIED_BY = createField(DSL.name("last_modified_by"), SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.crops.created_on</code>.
     */
    public final TableField<CropsRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.crops.last_modified_on</code>.
     */
    public final TableField<CropsRecord, OffsetDateTime> LAST_MODIFIED_ON = createField(DSL.name("last_modified_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Crops(Name alias, Table<CropsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Crops(Name alias, Table<CropsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.crops</code> table reference
     */
    public Crops(String alias) {
        this(DSL.name(alias), CROPS);
    }

    /**
     * Create an aliased <code>public.crops</code> table reference
     */
    public Crops(Name alias) {
        this(alias, CROPS);
    }

    /**
     * Create a <code>public.crops</code> table reference
     */
    public Crops() {
        this(DSL.name("crops"), null);
    }

    public <O extends Record> Crops(Table<O> path, ForeignKey<O, CropsRecord> childPath, InverseForeignKey<O, CropsRecord> parentPath) {
        super(path, childPath, parentPath, CROPS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CropsPath extends Crops implements Path<CropsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CropsPath(Table<O> path, ForeignKey<O, CropsRecord> childPath, InverseForeignKey<O, CropsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CropsPath(Name alias, Table<CropsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CropsPath as(String alias) {
            return new CropsPath(DSL.name(alias), this);
        }

        @Override
        public CropsPath as(Name alias) {
            return new CropsPath(alias, this);
        }

        @Override
        public CropsPath as(Table<?> alias) {
            return new CropsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CropsRecord, Integer> getIdentity() {
        return (Identity<CropsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CropsRecord> getPrimaryKey() {
        return Keys.CROPS_PKEY;
    }

    @Override
    public List<UniqueKey<CropsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CROPS_NAME_KEY);
    }

    private transient FarmOperationsPath _farmOperations;

    /**
     * Get the implicit to-many join path to the
     * <code>public.farm_operations</code> table
     */
    public FarmOperationsPath farmOperations() {
        if (_farmOperations == null)
            _farmOperations = new FarmOperationsPath(this, null, Keys.FARM_OPERATIONS__FK_FARM_OPERATIONS_CROPS.getInverseKey());

        return _farmOperations;
    }

    @Override
    public Crops as(String alias) {
        return new Crops(DSL.name(alias), this);
    }

    @Override
    public Crops as(Name alias) {
        return new Crops(alias, this);
    }

    @Override
    public Crops as(Table<?> alias) {
        return new Crops(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Crops rename(String name) {
        return new Crops(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crops rename(Name name) {
        return new Crops(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crops rename(Table<?> name) {
        return new Crops(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crops where(Condition condition) {
        return new Crops(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crops where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crops where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crops where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Crops where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Crops where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Crops where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Crops where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crops whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crops whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
